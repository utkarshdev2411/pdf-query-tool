# Stage 1: Build Stage
FROM python:3.9-slim AS build

# Set working directory
WORKDIR /app

# Copy only the requirements file first to leverage Docker cache
COPY ./requirements.txt /app/server/AI/requirements.txt

# Create and activate a virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install dependencies without caching to reduce image size
RUN pip install --no-cache-dir -r /app/server/AI/requirements.txt

# Copy the rest of the application code
COPY ./ /app/server/AI

# Stage 2: Runtime Stage
FROM python:3.9-slim AS runtime

# Set the environment path to the virtual environment
ENV PATH="/opt/venv/bin:$PATH"

# Copy the virtual environment from the build stage
COPY --from=build /opt/venv /opt/venv

# Copy only the necessary application files
COPY --from=build /app/server/AI /app/server/AI

# Set the working directory
WORKDIR /app/server/AI

# Expose the port your FastAPI app runs on
EXPOSE 8000

# Command to run the application
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]

# Stage 3: Nginx Stage
FROM nginx:alpine

# Copy the Nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Copy the application code and virtual environment from the runtime stage
COPY --from=runtime /app/server/AI /app/server/AI
COPY --from=runtime /opt/venv /opt/venv

# Set the environment path to the virtual environment
ENV PATH="/opt/venv/bin:$PATH"

# Expose the port Nginx will run on
EXPOSE 80

# Command to run Nginx
CMD ["nginx", "-g", "daemon off;"]